// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ride/payments/v1alpha1/payout.proto

package paymentsv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Payout with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payout with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PayoutMultiError, or nil if none found.
func (m *Payout) ValidateAll() error {
	return m.validate(true)
}

func (m *Payout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetName() != "" {

		if !_Payout_Name_Pattern.MatchString(m.GetName()) {
			err := PayoutValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/wallet/payouts/[A-Za-z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetAmount() <= 0 {
		err := PayoutValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayoutValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayoutValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayoutValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayoutValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayoutValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayoutValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Metadata.(type) {
	case *Payout_TransactionId:
		if v == nil {
			err := PayoutValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TransactionId
	case *Payout_FailureReason:
		if v == nil {
			err := PayoutValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FailureReason
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PayoutMultiError(errors)
	}

	return nil
}

// PayoutMultiError is an error wrapping multiple validation errors returned by
// Payout.ValidateAll() if the designated constraints aren't met.
type PayoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayoutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayoutMultiError) AllErrors() []error { return m }

// PayoutValidationError is the validation error returned by Payout.Validate if
// the designated constraints aren't met.
type PayoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayoutValidationError) ErrorName() string { return "PayoutValidationError" }

// Error satisfies the builtin error interface
func (e PayoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayoutValidationError{}

var _Payout_Name_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/wallet/payouts/[A-Za-z0-9_-]+$")

// Validate checks the field values on PayoutAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayoutAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayoutAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayoutAccountMultiError, or
// nil if none found.
func (m *PayoutAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *PayoutAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_PayoutAccount_Name_Pattern.MatchString(m.GetName()) {
		err := PayoutAccountValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/wallet/payout-account$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PayoutAccount_CurrencyCode_InLookup[m.GetCurrencyCode()]; !ok {
		err := PayoutAccountValidationError{
			field:  "CurrencyCode",
			reason: "value must be in list [INR]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RazorpayContactId

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayoutAccountValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayoutAccountValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayoutAccountValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayoutAccountValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayoutAccountValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayoutAccountValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Destination.(type) {
	case *PayoutAccount_BankAccount_:
		if v == nil {
			err := PayoutAccountValidationError{
				field:  "Destination",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBankAccount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PayoutAccountValidationError{
						field:  "BankAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PayoutAccountValidationError{
						field:  "BankAccount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PayoutAccountValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PayoutAccount_UpiId:
		if v == nil {
			err := PayoutAccountValidationError{
				field:  "Destination",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UpiId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PayoutAccountMultiError(errors)
	}

	return nil
}

// PayoutAccountMultiError is an error wrapping multiple validation errors
// returned by PayoutAccount.ValidateAll() if the designated constraints
// aren't met.
type PayoutAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayoutAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayoutAccountMultiError) AllErrors() []error { return m }

// PayoutAccountValidationError is the validation error returned by
// PayoutAccount.Validate if the designated constraints aren't met.
type PayoutAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayoutAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayoutAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayoutAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayoutAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayoutAccountValidationError) ErrorName() string { return "PayoutAccountValidationError" }

// Error satisfies the builtin error interface
func (e PayoutAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayoutAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayoutAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayoutAccountValidationError{}

var _PayoutAccount_Name_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/wallet/payout-account$")

var _PayoutAccount_CurrencyCode_InLookup = map[string]struct{}{
	"INR": {},
}

// Validate checks the field values on PayoutAccount_BankAccount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PayoutAccount_BankAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayoutAccount_BankAccount with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PayoutAccount_BankAccountMultiError, or nil if none found.
func (m *PayoutAccount_BankAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *PayoutAccount_BankAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HolderName

	// no validation rules for AccountNumber

	// no validation rules for IfscCode

	if len(errors) > 0 {
		return PayoutAccount_BankAccountMultiError(errors)
	}

	return nil
}

// PayoutAccount_BankAccountMultiError is an error wrapping multiple validation
// errors returned by PayoutAccount_BankAccount.ValidateAll() if the
// designated constraints aren't met.
type PayoutAccount_BankAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayoutAccount_BankAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayoutAccount_BankAccountMultiError) AllErrors() []error { return m }

// PayoutAccount_BankAccountValidationError is the validation error returned by
// PayoutAccount_BankAccount.Validate if the designated constraints aren't met.
type PayoutAccount_BankAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayoutAccount_BankAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayoutAccount_BankAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayoutAccount_BankAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayoutAccount_BankAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayoutAccount_BankAccountValidationError) ErrorName() string {
	return "PayoutAccount_BankAccountValidationError"
}

// Error satisfies the builtin error interface
func (e PayoutAccount_BankAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayoutAccount_BankAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayoutAccount_BankAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayoutAccount_BankAccountValidationError{}
