// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ride/payments/v1alpha1/service.proto

package paymentsv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/ride-app/payments-service/api/ride/payments/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentsServiceName is the fully-qualified name of the PaymentsService service.
	PaymentsServiceName = "ride.payments.v1alpha1.PaymentsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentsServiceGetWalletProcedure is the fully-qualified name of the PaymentsService's GetWallet
	// RPC.
	PaymentsServiceGetWalletProcedure = "/ride.payments.v1alpha1.PaymentsService/GetWallet"
	// PaymentsServiceCreateTransfersProcedure is the fully-qualified name of the PaymentsService's
	// CreateTransfers RPC.
	PaymentsServiceCreateTransfersProcedure = "/ride.payments.v1alpha1.PaymentsService/CreateTransfers"
	// PaymentsServiceGetTransactionProcedure is the fully-qualified name of the PaymentsService's
	// GetTransaction RPC.
	PaymentsServiceGetTransactionProcedure = "/ride.payments.v1alpha1.PaymentsService/GetTransaction"
	// PaymentsServiceListTransactionsProcedure is the fully-qualified name of the PaymentsService's
	// ListTransactions RPC.
	PaymentsServiceListTransactionsProcedure = "/ride.payments.v1alpha1.PaymentsService/ListTransactions"
	// PaymentsServiceCreateRechargeProcedure is the fully-qualified name of the PaymentsService's
	// CreateRecharge RPC.
	PaymentsServiceCreateRechargeProcedure = "/ride.payments.v1alpha1.PaymentsService/CreateRecharge"
	// PaymentsServiceGetRechargeProcedure is the fully-qualified name of the PaymentsService's
	// GetRecharge RPC.
	PaymentsServiceGetRechargeProcedure = "/ride.payments.v1alpha1.PaymentsService/GetRecharge"
	// PaymentsServiceListRechargesProcedure is the fully-qualified name of the PaymentsService's
	// ListRecharges RPC.
	PaymentsServiceListRechargesProcedure = "/ride.payments.v1alpha1.PaymentsService/ListRecharges"
	// PaymentsServiceCreatePayoutProcedure is the fully-qualified name of the PaymentsService's
	// CreatePayout RPC.
	PaymentsServiceCreatePayoutProcedure = "/ride.payments.v1alpha1.PaymentsService/CreatePayout"
	// PaymentsServiceGetPayoutProcedure is the fully-qualified name of the PaymentsService's GetPayout
	// RPC.
	PaymentsServiceGetPayoutProcedure = "/ride.payments.v1alpha1.PaymentsService/GetPayout"
	// PaymentsServiceListPayoutsProcedure is the fully-qualified name of the PaymentsService's
	// ListPayouts RPC.
	PaymentsServiceListPayoutsProcedure = "/ride.payments.v1alpha1.PaymentsService/ListPayouts"
	// PaymentsServiceCreatePayoutAccountProcedure is the fully-qualified name of the PaymentsService's
	// CreatePayoutAccount RPC.
	PaymentsServiceCreatePayoutAccountProcedure = "/ride.payments.v1alpha1.PaymentsService/CreatePayoutAccount"
	// PaymentsServiceGetPayoutAccountProcedure is the fully-qualified name of the PaymentsService's
	// GetPayoutAccount RPC.
	PaymentsServiceGetPayoutAccountProcedure = "/ride.payments.v1alpha1.PaymentsService/GetPayoutAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	paymentsServiceServiceDescriptor                   = v1alpha1.File_ride_payments_v1alpha1_service_proto.Services().ByName("PaymentsService")
	paymentsServiceGetWalletMethodDescriptor           = paymentsServiceServiceDescriptor.Methods().ByName("GetWallet")
	paymentsServiceCreateTransfersMethodDescriptor     = paymentsServiceServiceDescriptor.Methods().ByName("CreateTransfers")
	paymentsServiceGetTransactionMethodDescriptor      = paymentsServiceServiceDescriptor.Methods().ByName("GetTransaction")
	paymentsServiceListTransactionsMethodDescriptor    = paymentsServiceServiceDescriptor.Methods().ByName("ListTransactions")
	paymentsServiceCreateRechargeMethodDescriptor      = paymentsServiceServiceDescriptor.Methods().ByName("CreateRecharge")
	paymentsServiceGetRechargeMethodDescriptor         = paymentsServiceServiceDescriptor.Methods().ByName("GetRecharge")
	paymentsServiceListRechargesMethodDescriptor       = paymentsServiceServiceDescriptor.Methods().ByName("ListRecharges")
	paymentsServiceCreatePayoutMethodDescriptor        = paymentsServiceServiceDescriptor.Methods().ByName("CreatePayout")
	paymentsServiceGetPayoutMethodDescriptor           = paymentsServiceServiceDescriptor.Methods().ByName("GetPayout")
	paymentsServiceListPayoutsMethodDescriptor         = paymentsServiceServiceDescriptor.Methods().ByName("ListPayouts")
	paymentsServiceCreatePayoutAccountMethodDescriptor = paymentsServiceServiceDescriptor.Methods().ByName("CreatePayoutAccount")
	paymentsServiceGetPayoutAccountMethodDescriptor    = paymentsServiceServiceDescriptor.Methods().ByName("GetPayoutAccount")
)

// PaymentsServiceClient is a client for the ride.payments.v1alpha1.PaymentsService service.
type PaymentsServiceClient interface {
	GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error)
	// Create multiple transactions at once in a single atomic reuqest.
	CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error)
	GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error)
	CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error)
	GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error)
	ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error)
	CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error)
	GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error)
	ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error)
	CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error)
	GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error)
}

// NewPaymentsServiceClient constructs a client for the ride.payments.v1alpha1.PaymentsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paymentsServiceClient{
		getWallet: connect.NewClient[v1alpha1.GetWalletRequest, v1alpha1.GetWalletResponse](
			httpClient,
			baseURL+PaymentsServiceGetWalletProcedure,
			connect.WithSchema(paymentsServiceGetWalletMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTransfers: connect.NewClient[v1alpha1.CreateTransfersRequest, v1alpha1.CreateTransfersResponse](
			httpClient,
			baseURL+PaymentsServiceCreateTransfersProcedure,
			connect.WithSchema(paymentsServiceCreateTransfersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1alpha1.GetTransactionRequest, v1alpha1.GetTransactionResponse](
			httpClient,
			baseURL+PaymentsServiceGetTransactionProcedure,
			connect.WithSchema(paymentsServiceGetTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[v1alpha1.ListTransactionsRequest, v1alpha1.ListTransactionsResponse](
			httpClient,
			baseURL+PaymentsServiceListTransactionsProcedure,
			connect.WithSchema(paymentsServiceListTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRecharge: connect.NewClient[v1alpha1.CreateRechargeRequest, v1alpha1.CreateRechargeResponse](
			httpClient,
			baseURL+PaymentsServiceCreateRechargeProcedure,
			connect.WithSchema(paymentsServiceCreateRechargeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecharge: connect.NewClient[v1alpha1.GetRechargeRequest, v1alpha1.GetRechargeResponse](
			httpClient,
			baseURL+PaymentsServiceGetRechargeProcedure,
			connect.WithSchema(paymentsServiceGetRechargeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRecharges: connect.NewClient[v1alpha1.ListRechargesRequest, v1alpha1.ListRechargesResponse](
			httpClient,
			baseURL+PaymentsServiceListRechargesProcedure,
			connect.WithSchema(paymentsServiceListRechargesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPayout: connect.NewClient[v1alpha1.CreatePayoutRequest, v1alpha1.CreatePayoutResponse](
			httpClient,
			baseURL+PaymentsServiceCreatePayoutProcedure,
			connect.WithSchema(paymentsServiceCreatePayoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPayout: connect.NewClient[v1alpha1.GetPayoutRequest, v1alpha1.GetPayoutResponse](
			httpClient,
			baseURL+PaymentsServiceGetPayoutProcedure,
			connect.WithSchema(paymentsServiceGetPayoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPayouts: connect.NewClient[v1alpha1.ListPayoutsRequest, v1alpha1.ListPayoutsResponse](
			httpClient,
			baseURL+PaymentsServiceListPayoutsProcedure,
			connect.WithSchema(paymentsServiceListPayoutsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPayoutAccount: connect.NewClient[v1alpha1.CreatePayoutAccountRequest, v1alpha1.CreatePayoutAccountResponse](
			httpClient,
			baseURL+PaymentsServiceCreatePayoutAccountProcedure,
			connect.WithSchema(paymentsServiceCreatePayoutAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPayoutAccount: connect.NewClient[v1alpha1.GetPayoutAccountRequest, v1alpha1.GetPayoutAccountResponse](
			httpClient,
			baseURL+PaymentsServiceGetPayoutAccountProcedure,
			connect.WithSchema(paymentsServiceGetPayoutAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentsServiceClient implements PaymentsServiceClient.
type paymentsServiceClient struct {
	getWallet           *connect.Client[v1alpha1.GetWalletRequest, v1alpha1.GetWalletResponse]
	createTransfers     *connect.Client[v1alpha1.CreateTransfersRequest, v1alpha1.CreateTransfersResponse]
	getTransaction      *connect.Client[v1alpha1.GetTransactionRequest, v1alpha1.GetTransactionResponse]
	listTransactions    *connect.Client[v1alpha1.ListTransactionsRequest, v1alpha1.ListTransactionsResponse]
	createRecharge      *connect.Client[v1alpha1.CreateRechargeRequest, v1alpha1.CreateRechargeResponse]
	getRecharge         *connect.Client[v1alpha1.GetRechargeRequest, v1alpha1.GetRechargeResponse]
	listRecharges       *connect.Client[v1alpha1.ListRechargesRequest, v1alpha1.ListRechargesResponse]
	createPayout        *connect.Client[v1alpha1.CreatePayoutRequest, v1alpha1.CreatePayoutResponse]
	getPayout           *connect.Client[v1alpha1.GetPayoutRequest, v1alpha1.GetPayoutResponse]
	listPayouts         *connect.Client[v1alpha1.ListPayoutsRequest, v1alpha1.ListPayoutsResponse]
	createPayoutAccount *connect.Client[v1alpha1.CreatePayoutAccountRequest, v1alpha1.CreatePayoutAccountResponse]
	getPayoutAccount    *connect.Client[v1alpha1.GetPayoutAccountRequest, v1alpha1.GetPayoutAccountResponse]
}

// GetWallet calls ride.payments.v1alpha1.PaymentsService.GetWallet.
func (c *paymentsServiceClient) GetWallet(ctx context.Context, req *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error) {
	return c.getWallet.CallUnary(ctx, req)
}

// CreateTransfers calls ride.payments.v1alpha1.PaymentsService.CreateTransfers.
func (c *paymentsServiceClient) CreateTransfers(ctx context.Context, req *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error) {
	return c.createTransfers.CallUnary(ctx, req)
}

// GetTransaction calls ride.payments.v1alpha1.PaymentsService.GetTransaction.
func (c *paymentsServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListTransactions calls ride.payments.v1alpha1.PaymentsService.ListTransactions.
func (c *paymentsServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// CreateRecharge calls ride.payments.v1alpha1.PaymentsService.CreateRecharge.
func (c *paymentsServiceClient) CreateRecharge(ctx context.Context, req *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error) {
	return c.createRecharge.CallUnary(ctx, req)
}

// GetRecharge calls ride.payments.v1alpha1.PaymentsService.GetRecharge.
func (c *paymentsServiceClient) GetRecharge(ctx context.Context, req *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error) {
	return c.getRecharge.CallUnary(ctx, req)
}

// ListRecharges calls ride.payments.v1alpha1.PaymentsService.ListRecharges.
func (c *paymentsServiceClient) ListRecharges(ctx context.Context, req *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error) {
	return c.listRecharges.CallUnary(ctx, req)
}

// CreatePayout calls ride.payments.v1alpha1.PaymentsService.CreatePayout.
func (c *paymentsServiceClient) CreatePayout(ctx context.Context, req *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error) {
	return c.createPayout.CallUnary(ctx, req)
}

// GetPayout calls ride.payments.v1alpha1.PaymentsService.GetPayout.
func (c *paymentsServiceClient) GetPayout(ctx context.Context, req *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error) {
	return c.getPayout.CallUnary(ctx, req)
}

// ListPayouts calls ride.payments.v1alpha1.PaymentsService.ListPayouts.
func (c *paymentsServiceClient) ListPayouts(ctx context.Context, req *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error) {
	return c.listPayouts.CallUnary(ctx, req)
}

// CreatePayoutAccount calls ride.payments.v1alpha1.PaymentsService.CreatePayoutAccount.
func (c *paymentsServiceClient) CreatePayoutAccount(ctx context.Context, req *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error) {
	return c.createPayoutAccount.CallUnary(ctx, req)
}

// GetPayoutAccount calls ride.payments.v1alpha1.PaymentsService.GetPayoutAccount.
func (c *paymentsServiceClient) GetPayoutAccount(ctx context.Context, req *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error) {
	return c.getPayoutAccount.CallUnary(ctx, req)
}

// PaymentsServiceHandler is an implementation of the ride.payments.v1alpha1.PaymentsService
// service.
type PaymentsServiceHandler interface {
	GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error)
	// Create multiple transactions at once in a single atomic reuqest.
	CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error)
	GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error)
	CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error)
	GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error)
	ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error)
	CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error)
	GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error)
	ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error)
	CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error)
	GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error)
}

// NewPaymentsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentsServiceHandler(svc PaymentsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentsServiceGetWalletHandler := connect.NewUnaryHandler(
		PaymentsServiceGetWalletProcedure,
		svc.GetWallet,
		connect.WithSchema(paymentsServiceGetWalletMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceCreateTransfersHandler := connect.NewUnaryHandler(
		PaymentsServiceCreateTransfersProcedure,
		svc.CreateTransfers,
		connect.WithSchema(paymentsServiceCreateTransfersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceGetTransactionHandler := connect.NewUnaryHandler(
		PaymentsServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(paymentsServiceGetTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceListTransactionsHandler := connect.NewUnaryHandler(
		PaymentsServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(paymentsServiceListTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceCreateRechargeHandler := connect.NewUnaryHandler(
		PaymentsServiceCreateRechargeProcedure,
		svc.CreateRecharge,
		connect.WithSchema(paymentsServiceCreateRechargeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceGetRechargeHandler := connect.NewUnaryHandler(
		PaymentsServiceGetRechargeProcedure,
		svc.GetRecharge,
		connect.WithSchema(paymentsServiceGetRechargeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceListRechargesHandler := connect.NewUnaryHandler(
		PaymentsServiceListRechargesProcedure,
		svc.ListRecharges,
		connect.WithSchema(paymentsServiceListRechargesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceCreatePayoutHandler := connect.NewUnaryHandler(
		PaymentsServiceCreatePayoutProcedure,
		svc.CreatePayout,
		connect.WithSchema(paymentsServiceCreatePayoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceGetPayoutHandler := connect.NewUnaryHandler(
		PaymentsServiceGetPayoutProcedure,
		svc.GetPayout,
		connect.WithSchema(paymentsServiceGetPayoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceListPayoutsHandler := connect.NewUnaryHandler(
		PaymentsServiceListPayoutsProcedure,
		svc.ListPayouts,
		connect.WithSchema(paymentsServiceListPayoutsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceCreatePayoutAccountHandler := connect.NewUnaryHandler(
		PaymentsServiceCreatePayoutAccountProcedure,
		svc.CreatePayoutAccount,
		connect.WithSchema(paymentsServiceCreatePayoutAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	paymentsServiceGetPayoutAccountHandler := connect.NewUnaryHandler(
		PaymentsServiceGetPayoutAccountProcedure,
		svc.GetPayoutAccount,
		connect.WithSchema(paymentsServiceGetPayoutAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ride.payments.v1alpha1.PaymentsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentsServiceGetWalletProcedure:
			paymentsServiceGetWalletHandler.ServeHTTP(w, r)
		case PaymentsServiceCreateTransfersProcedure:
			paymentsServiceCreateTransfersHandler.ServeHTTP(w, r)
		case PaymentsServiceGetTransactionProcedure:
			paymentsServiceGetTransactionHandler.ServeHTTP(w, r)
		case PaymentsServiceListTransactionsProcedure:
			paymentsServiceListTransactionsHandler.ServeHTTP(w, r)
		case PaymentsServiceCreateRechargeProcedure:
			paymentsServiceCreateRechargeHandler.ServeHTTP(w, r)
		case PaymentsServiceGetRechargeProcedure:
			paymentsServiceGetRechargeHandler.ServeHTTP(w, r)
		case PaymentsServiceListRechargesProcedure:
			paymentsServiceListRechargesHandler.ServeHTTP(w, r)
		case PaymentsServiceCreatePayoutProcedure:
			paymentsServiceCreatePayoutHandler.ServeHTTP(w, r)
		case PaymentsServiceGetPayoutProcedure:
			paymentsServiceGetPayoutHandler.ServeHTTP(w, r)
		case PaymentsServiceListPayoutsProcedure:
			paymentsServiceListPayoutsHandler.ServeHTTP(w, r)
		case PaymentsServiceCreatePayoutAccountProcedure:
			paymentsServiceCreatePayoutAccountHandler.ServeHTTP(w, r)
		case PaymentsServiceGetPayoutAccountProcedure:
			paymentsServiceGetPayoutAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentsServiceHandler struct{}

func (UnimplementedPaymentsServiceHandler) GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.GetWallet is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.CreateTransfers is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.GetTransaction is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.ListTransactions is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.CreateRecharge is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.GetRecharge is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.ListRecharges is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.CreatePayout is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.GetPayout is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.ListPayouts is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.CreatePayoutAccount is not implemented"))
}

func (UnimplementedPaymentsServiceHandler) GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.payments.v1alpha1.PaymentsService.GetPayoutAccount is not implemented"))
}
