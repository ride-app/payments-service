// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ride/wallet/v1alpha1/service.proto

package walletv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/ride-app/wallet-service/api/ride/wallet/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "ride.wallet.v1alpha1.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceGetWalletProcedure is the fully-qualified name of the WalletService's GetWallet RPC.
	WalletServiceGetWalletProcedure = "/ride.wallet.v1alpha1.WalletService/GetWallet"
	// WalletServiceCreateTransfersProcedure is the fully-qualified name of the WalletService's
	// CreateTransfers RPC.
	WalletServiceCreateTransfersProcedure = "/ride.wallet.v1alpha1.WalletService/CreateTransfers"
	// WalletServiceGetTransactionProcedure is the fully-qualified name of the WalletService's
	// GetTransaction RPC.
	WalletServiceGetTransactionProcedure = "/ride.wallet.v1alpha1.WalletService/GetTransaction"
	// WalletServiceListTransactionsProcedure is the fully-qualified name of the WalletService's
	// ListTransactions RPC.
	WalletServiceListTransactionsProcedure = "/ride.wallet.v1alpha1.WalletService/ListTransactions"
	// WalletServiceCreateRechargeProcedure is the fully-qualified name of the WalletService's
	// CreateRecharge RPC.
	WalletServiceCreateRechargeProcedure = "/ride.wallet.v1alpha1.WalletService/CreateRecharge"
	// WalletServiceGetRechargeProcedure is the fully-qualified name of the WalletService's GetRecharge
	// RPC.
	WalletServiceGetRechargeProcedure = "/ride.wallet.v1alpha1.WalletService/GetRecharge"
	// WalletServiceListRechargesProcedure is the fully-qualified name of the WalletService's
	// ListRecharges RPC.
	WalletServiceListRechargesProcedure = "/ride.wallet.v1alpha1.WalletService/ListRecharges"
	// WalletServiceCreatePayoutProcedure is the fully-qualified name of the WalletService's
	// CreatePayout RPC.
	WalletServiceCreatePayoutProcedure = "/ride.wallet.v1alpha1.WalletService/CreatePayout"
	// WalletServiceGetPayoutProcedure is the fully-qualified name of the WalletService's GetPayout RPC.
	WalletServiceGetPayoutProcedure = "/ride.wallet.v1alpha1.WalletService/GetPayout"
	// WalletServiceListPayoutsProcedure is the fully-qualified name of the WalletService's ListPayouts
	// RPC.
	WalletServiceListPayoutsProcedure = "/ride.wallet.v1alpha1.WalletService/ListPayouts"
	// WalletServiceCreatePayoutAccountProcedure is the fully-qualified name of the WalletService's
	// CreatePayoutAccount RPC.
	WalletServiceCreatePayoutAccountProcedure = "/ride.wallet.v1alpha1.WalletService/CreatePayoutAccount"
	// WalletServiceGetPayoutAccountProcedure is the fully-qualified name of the WalletService's
	// GetPayoutAccount RPC.
	WalletServiceGetPayoutAccountProcedure = "/ride.wallet.v1alpha1.WalletService/GetPayoutAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	walletServiceServiceDescriptor                   = v1alpha1.File_ride_wallet_v1alpha1_service_proto.Services().ByName("WalletService")
	walletServiceGetWalletMethodDescriptor           = walletServiceServiceDescriptor.Methods().ByName("GetWallet")
	walletServiceCreateTransfersMethodDescriptor     = walletServiceServiceDescriptor.Methods().ByName("CreateTransfers")
	walletServiceGetTransactionMethodDescriptor      = walletServiceServiceDescriptor.Methods().ByName("GetTransaction")
	walletServiceListTransactionsMethodDescriptor    = walletServiceServiceDescriptor.Methods().ByName("ListTransactions")
	walletServiceCreateRechargeMethodDescriptor      = walletServiceServiceDescriptor.Methods().ByName("CreateRecharge")
	walletServiceGetRechargeMethodDescriptor         = walletServiceServiceDescriptor.Methods().ByName("GetRecharge")
	walletServiceListRechargesMethodDescriptor       = walletServiceServiceDescriptor.Methods().ByName("ListRecharges")
	walletServiceCreatePayoutMethodDescriptor        = walletServiceServiceDescriptor.Methods().ByName("CreatePayout")
	walletServiceGetPayoutMethodDescriptor           = walletServiceServiceDescriptor.Methods().ByName("GetPayout")
	walletServiceListPayoutsMethodDescriptor         = walletServiceServiceDescriptor.Methods().ByName("ListPayouts")
	walletServiceCreatePayoutAccountMethodDescriptor = walletServiceServiceDescriptor.Methods().ByName("CreatePayoutAccount")
	walletServiceGetPayoutAccountMethodDescriptor    = walletServiceServiceDescriptor.Methods().ByName("GetPayoutAccount")
)

// WalletServiceClient is a client for the ride.wallet.v1alpha1.WalletService service.
type WalletServiceClient interface {
	GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error)
	// Create multiple transactions at once in a single atomic reuqest.
	CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error)
	GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error)
	CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error)
	GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error)
	ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error)
	CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error)
	GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error)
	ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error)
	CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error)
	GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error)
}

// NewWalletServiceClient constructs a client for the ride.wallet.v1alpha1.WalletService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		getWallet: connect.NewClient[v1alpha1.GetWalletRequest, v1alpha1.GetWalletResponse](
			httpClient,
			baseURL+WalletServiceGetWalletProcedure,
			connect.WithSchema(walletServiceGetWalletMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTransfers: connect.NewClient[v1alpha1.CreateTransfersRequest, v1alpha1.CreateTransfersResponse](
			httpClient,
			baseURL+WalletServiceCreateTransfersProcedure,
			connect.WithSchema(walletServiceCreateTransfersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1alpha1.GetTransactionRequest, v1alpha1.GetTransactionResponse](
			httpClient,
			baseURL+WalletServiceGetTransactionProcedure,
			connect.WithSchema(walletServiceGetTransactionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[v1alpha1.ListTransactionsRequest, v1alpha1.ListTransactionsResponse](
			httpClient,
			baseURL+WalletServiceListTransactionsProcedure,
			connect.WithSchema(walletServiceListTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRecharge: connect.NewClient[v1alpha1.CreateRechargeRequest, v1alpha1.CreateRechargeResponse](
			httpClient,
			baseURL+WalletServiceCreateRechargeProcedure,
			connect.WithSchema(walletServiceCreateRechargeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecharge: connect.NewClient[v1alpha1.GetRechargeRequest, v1alpha1.GetRechargeResponse](
			httpClient,
			baseURL+WalletServiceGetRechargeProcedure,
			connect.WithSchema(walletServiceGetRechargeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRecharges: connect.NewClient[v1alpha1.ListRechargesRequest, v1alpha1.ListRechargesResponse](
			httpClient,
			baseURL+WalletServiceListRechargesProcedure,
			connect.WithSchema(walletServiceListRechargesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPayout: connect.NewClient[v1alpha1.CreatePayoutRequest, v1alpha1.CreatePayoutResponse](
			httpClient,
			baseURL+WalletServiceCreatePayoutProcedure,
			connect.WithSchema(walletServiceCreatePayoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPayout: connect.NewClient[v1alpha1.GetPayoutRequest, v1alpha1.GetPayoutResponse](
			httpClient,
			baseURL+WalletServiceGetPayoutProcedure,
			connect.WithSchema(walletServiceGetPayoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPayouts: connect.NewClient[v1alpha1.ListPayoutsRequest, v1alpha1.ListPayoutsResponse](
			httpClient,
			baseURL+WalletServiceListPayoutsProcedure,
			connect.WithSchema(walletServiceListPayoutsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createPayoutAccount: connect.NewClient[v1alpha1.CreatePayoutAccountRequest, v1alpha1.CreatePayoutAccountResponse](
			httpClient,
			baseURL+WalletServiceCreatePayoutAccountProcedure,
			connect.WithSchema(walletServiceCreatePayoutAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPayoutAccount: connect.NewClient[v1alpha1.GetPayoutAccountRequest, v1alpha1.GetPayoutAccountResponse](
			httpClient,
			baseURL+WalletServiceGetPayoutAccountProcedure,
			connect.WithSchema(walletServiceGetPayoutAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	getWallet           *connect.Client[v1alpha1.GetWalletRequest, v1alpha1.GetWalletResponse]
	createTransfers     *connect.Client[v1alpha1.CreateTransfersRequest, v1alpha1.CreateTransfersResponse]
	getTransaction      *connect.Client[v1alpha1.GetTransactionRequest, v1alpha1.GetTransactionResponse]
	listTransactions    *connect.Client[v1alpha1.ListTransactionsRequest, v1alpha1.ListTransactionsResponse]
	createRecharge      *connect.Client[v1alpha1.CreateRechargeRequest, v1alpha1.CreateRechargeResponse]
	getRecharge         *connect.Client[v1alpha1.GetRechargeRequest, v1alpha1.GetRechargeResponse]
	listRecharges       *connect.Client[v1alpha1.ListRechargesRequest, v1alpha1.ListRechargesResponse]
	createPayout        *connect.Client[v1alpha1.CreatePayoutRequest, v1alpha1.CreatePayoutResponse]
	getPayout           *connect.Client[v1alpha1.GetPayoutRequest, v1alpha1.GetPayoutResponse]
	listPayouts         *connect.Client[v1alpha1.ListPayoutsRequest, v1alpha1.ListPayoutsResponse]
	createPayoutAccount *connect.Client[v1alpha1.CreatePayoutAccountRequest, v1alpha1.CreatePayoutAccountResponse]
	getPayoutAccount    *connect.Client[v1alpha1.GetPayoutAccountRequest, v1alpha1.GetPayoutAccountResponse]
}

// GetWallet calls ride.wallet.v1alpha1.WalletService.GetWallet.
func (c *walletServiceClient) GetWallet(ctx context.Context, req *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error) {
	return c.getWallet.CallUnary(ctx, req)
}

// CreateTransfers calls ride.wallet.v1alpha1.WalletService.CreateTransfers.
func (c *walletServiceClient) CreateTransfers(ctx context.Context, req *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error) {
	return c.createTransfers.CallUnary(ctx, req)
}

// GetTransaction calls ride.wallet.v1alpha1.WalletService.GetTransaction.
func (c *walletServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListTransactions calls ride.wallet.v1alpha1.WalletService.ListTransactions.
func (c *walletServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// CreateRecharge calls ride.wallet.v1alpha1.WalletService.CreateRecharge.
func (c *walletServiceClient) CreateRecharge(ctx context.Context, req *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error) {
	return c.createRecharge.CallUnary(ctx, req)
}

// GetRecharge calls ride.wallet.v1alpha1.WalletService.GetRecharge.
func (c *walletServiceClient) GetRecharge(ctx context.Context, req *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error) {
	return c.getRecharge.CallUnary(ctx, req)
}

// ListRecharges calls ride.wallet.v1alpha1.WalletService.ListRecharges.
func (c *walletServiceClient) ListRecharges(ctx context.Context, req *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error) {
	return c.listRecharges.CallUnary(ctx, req)
}

// CreatePayout calls ride.wallet.v1alpha1.WalletService.CreatePayout.
func (c *walletServiceClient) CreatePayout(ctx context.Context, req *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error) {
	return c.createPayout.CallUnary(ctx, req)
}

// GetPayout calls ride.wallet.v1alpha1.WalletService.GetPayout.
func (c *walletServiceClient) GetPayout(ctx context.Context, req *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error) {
	return c.getPayout.CallUnary(ctx, req)
}

// ListPayouts calls ride.wallet.v1alpha1.WalletService.ListPayouts.
func (c *walletServiceClient) ListPayouts(ctx context.Context, req *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error) {
	return c.listPayouts.CallUnary(ctx, req)
}

// CreatePayoutAccount calls ride.wallet.v1alpha1.WalletService.CreatePayoutAccount.
func (c *walletServiceClient) CreatePayoutAccount(ctx context.Context, req *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error) {
	return c.createPayoutAccount.CallUnary(ctx, req)
}

// GetPayoutAccount calls ride.wallet.v1alpha1.WalletService.GetPayoutAccount.
func (c *walletServiceClient) GetPayoutAccount(ctx context.Context, req *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error) {
	return c.getPayoutAccount.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the ride.wallet.v1alpha1.WalletService service.
type WalletServiceHandler interface {
	GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error)
	// Create multiple transactions at once in a single atomic reuqest.
	CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error)
	GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error)
	CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error)
	GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error)
	ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error)
	CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error)
	GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error)
	ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error)
	CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error)
	GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	walletServiceGetWalletHandler := connect.NewUnaryHandler(
		WalletServiceGetWalletProcedure,
		svc.GetWallet,
		connect.WithSchema(walletServiceGetWalletMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateTransfersHandler := connect.NewUnaryHandler(
		WalletServiceCreateTransfersProcedure,
		svc.CreateTransfers,
		connect.WithSchema(walletServiceCreateTransfersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetTransactionHandler := connect.NewUnaryHandler(
		WalletServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(walletServiceGetTransactionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListTransactionsHandler := connect.NewUnaryHandler(
		WalletServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(walletServiceListTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreateRechargeHandler := connect.NewUnaryHandler(
		WalletServiceCreateRechargeProcedure,
		svc.CreateRecharge,
		connect.WithSchema(walletServiceCreateRechargeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetRechargeHandler := connect.NewUnaryHandler(
		WalletServiceGetRechargeProcedure,
		svc.GetRecharge,
		connect.WithSchema(walletServiceGetRechargeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListRechargesHandler := connect.NewUnaryHandler(
		WalletServiceListRechargesProcedure,
		svc.ListRecharges,
		connect.WithSchema(walletServiceListRechargesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreatePayoutHandler := connect.NewUnaryHandler(
		WalletServiceCreatePayoutProcedure,
		svc.CreatePayout,
		connect.WithSchema(walletServiceCreatePayoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetPayoutHandler := connect.NewUnaryHandler(
		WalletServiceGetPayoutProcedure,
		svc.GetPayout,
		connect.WithSchema(walletServiceGetPayoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceListPayoutsHandler := connect.NewUnaryHandler(
		WalletServiceListPayoutsProcedure,
		svc.ListPayouts,
		connect.WithSchema(walletServiceListPayoutsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceCreatePayoutAccountHandler := connect.NewUnaryHandler(
		WalletServiceCreatePayoutAccountProcedure,
		svc.CreatePayoutAccount,
		connect.WithSchema(walletServiceCreatePayoutAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	walletServiceGetPayoutAccountHandler := connect.NewUnaryHandler(
		WalletServiceGetPayoutAccountProcedure,
		svc.GetPayoutAccount,
		connect.WithSchema(walletServiceGetPayoutAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ride.wallet.v1alpha1.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceGetWalletProcedure:
			walletServiceGetWalletHandler.ServeHTTP(w, r)
		case WalletServiceCreateTransfersProcedure:
			walletServiceCreateTransfersHandler.ServeHTTP(w, r)
		case WalletServiceGetTransactionProcedure:
			walletServiceGetTransactionHandler.ServeHTTP(w, r)
		case WalletServiceListTransactionsProcedure:
			walletServiceListTransactionsHandler.ServeHTTP(w, r)
		case WalletServiceCreateRechargeProcedure:
			walletServiceCreateRechargeHandler.ServeHTTP(w, r)
		case WalletServiceGetRechargeProcedure:
			walletServiceGetRechargeHandler.ServeHTTP(w, r)
		case WalletServiceListRechargesProcedure:
			walletServiceListRechargesHandler.ServeHTTP(w, r)
		case WalletServiceCreatePayoutProcedure:
			walletServiceCreatePayoutHandler.ServeHTTP(w, r)
		case WalletServiceGetPayoutProcedure:
			walletServiceGetPayoutHandler.ServeHTTP(w, r)
		case WalletServiceListPayoutsProcedure:
			walletServiceListPayoutsHandler.ServeHTTP(w, r)
		case WalletServiceCreatePayoutAccountProcedure:
			walletServiceCreatePayoutAccountHandler.ServeHTTP(w, r)
		case WalletServiceGetPayoutAccountProcedure:
			walletServiceGetPayoutAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) GetWallet(context.Context, *connect.Request[v1alpha1.GetWalletRequest]) (*connect.Response[v1alpha1.GetWalletResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.GetWallet is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateTransfers(context.Context, *connect.Request[v1alpha1.CreateTransfersRequest]) (*connect.Response[v1alpha1.CreateTransfersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.CreateTransfers is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetTransaction(context.Context, *connect.Request[v1alpha1.GetTransactionRequest]) (*connect.Response[v1alpha1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.GetTransaction is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListTransactions(context.Context, *connect.Request[v1alpha1.ListTransactionsRequest]) (*connect.Response[v1alpha1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.ListTransactions is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateRecharge(context.Context, *connect.Request[v1alpha1.CreateRechargeRequest]) (*connect.Response[v1alpha1.CreateRechargeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.CreateRecharge is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetRecharge(context.Context, *connect.Request[v1alpha1.GetRechargeRequest]) (*connect.Response[v1alpha1.GetRechargeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.GetRecharge is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListRecharges(context.Context, *connect.Request[v1alpha1.ListRechargesRequest]) (*connect.Response[v1alpha1.ListRechargesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.ListRecharges is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreatePayout(context.Context, *connect.Request[v1alpha1.CreatePayoutRequest]) (*connect.Response[v1alpha1.CreatePayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.CreatePayout is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetPayout(context.Context, *connect.Request[v1alpha1.GetPayoutRequest]) (*connect.Response[v1alpha1.GetPayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.GetPayout is not implemented"))
}

func (UnimplementedWalletServiceHandler) ListPayouts(context.Context, *connect.Request[v1alpha1.ListPayoutsRequest]) (*connect.Response[v1alpha1.ListPayoutsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.ListPayouts is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreatePayoutAccount(context.Context, *connect.Request[v1alpha1.CreatePayoutAccountRequest]) (*connect.Response[v1alpha1.CreatePayoutAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.CreatePayoutAccount is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetPayoutAccount(context.Context, *connect.Request[v1alpha1.GetPayoutAccountRequest]) (*connect.Response[v1alpha1.GetPayoutAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.wallet.v1alpha1.WalletService.GetPayoutAccount is not implemented"))
}
