// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ride/wallet/v1alpha1/transfer.proto

package walletv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Transfer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transfer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transfer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransferMultiError, or nil
// if none found.
func (m *Transfer) ValidateAll() error {
	return m.validate(true)
}

func (m *Transfer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetName() != "" {

		if !_Transfer_Name_Pattern.MatchString(m.GetName()) {
			err := TransferValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^transfers/[A-Za-z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetAmount() <= 0 {
		err := TransferValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if !_Transfer_Source_Pattern.MatchString(m.GetSource()) {
		err := TransferValidationError{
			field:  "Source",
			reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/wallet$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Transfer_Destination_Pattern.MatchString(m.GetDestination()) {
		err := TransferValidationError{
			field:  "Destination",
			reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/wallet$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransferMultiError(errors)
	}

	return nil
}

// TransferMultiError is an error wrapping multiple validation errors returned
// by Transfer.ValidateAll() if the designated constraints aren't met.
type TransferMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferMultiError) AllErrors() []error { return m }

// TransferValidationError is the validation error returned by
// Transfer.Validate if the designated constraints aren't met.
type TransferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferValidationError) ErrorName() string { return "TransferValidationError" }

// Error satisfies the builtin error interface
func (e TransferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferValidationError{}

var _Transfer_Name_Pattern = regexp.MustCompile("^transfers/[A-Za-z0-9_-]+$")

var _Transfer_Source_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/wallet$")

var _Transfer_Destination_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/wallet$")

// Validate checks the field values on Transfer_Details with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Transfer_Details) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transfer_Details with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Transfer_DetailsMultiError, or nil if none found.
func (m *Transfer_Details) ValidateAll() error {
	return m.validate(true)
}

func (m *Transfer_Details) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 32 {
		err := Transfer_DetailsValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetReference()) > 128 {
		err := Transfer_DetailsValidationError{
			field:  "Reference",
			reason: "value length must be at most 128 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {

		if m.GetDescription() != "" {

			if len(m.GetDescription()) > 128 {
				err := Transfer_DetailsValidationError{
					field:  "Description",
					reason: "value length must be at most 128 bytes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return Transfer_DetailsMultiError(errors)
	}

	return nil
}

// Transfer_DetailsMultiError is an error wrapping multiple validation errors
// returned by Transfer_Details.ValidateAll() if the designated constraints
// aren't met.
type Transfer_DetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transfer_DetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transfer_DetailsMultiError) AllErrors() []error { return m }

// Transfer_DetailsValidationError is the validation error returned by
// Transfer_Details.Validate if the designated constraints aren't met.
type Transfer_DetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transfer_DetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transfer_DetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transfer_DetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transfer_DetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transfer_DetailsValidationError) ErrorName() string { return "Transfer_DetailsValidationError" }

// Error satisfies the builtin error interface
func (e Transfer_DetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer_Details.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transfer_DetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transfer_DetailsValidationError{}
