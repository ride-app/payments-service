syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/type/money.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

package ride.payout.v1alpha1;

service PayoutService {
  rpc CreatePayout(CreatePayoutRequest) returns (CreatePayoutResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=users/*/wallet}/payouts"
      body: "*"
    };
  }

  rpc GetPayout(GetPayoutRequest) returns (GetPayoutResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=users/*/wallet/payouts/*}"
    };
  }

  rpc ListPayouts(ListPayoutsRequest) returns (ListPayoutsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=users/*/wallet}/payouts"
    };
  }
}

message Payout {
  // Relative resource name of Payout, for example: "users/user1/wallet/payouts/payout1"
  string name = 1;

  // The amount of money to be charged.
  google.type.Money amount = 2;

  // The status of the Payout.
  Status status = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Timestamp when the Payout was created.
  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Relative resource name of the transaction accociated with the Payout. Only available when Payout.status is STATUS_SUCCESS
  optional string transaction_id = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Only available when status is STATUS_FAILED
  optional string failure_reason = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_PENDING = 1;
    STATUS_SUCCESS = 2;
    STATUS_FAILED = 3;
  }
}

message CreatePayoutRequest {
  // The parent wallet name where the Payout is to be created. example: "users/user1/wallet/"
  string parent = 1;

  // The Payout to be created. Client **must** not set Payout.name.
  Payout payout = 2;
}

message CreatePayoutResponse {
  // The created Payout
  Payout payout = 1;

  // Information required for the checkout payment gateway.
  map<string, string> checkout_info = 2;
}

message GetPayoutRequest {
  // Relative Resource name of the Payout, for example, "users/user1/wallet/payouts/payout1"
  string name = 1;

  optional google.protobuf.FieldMask fields = 99;
}

message GetPayoutResponse {
  // The requested payout.
  Payout payout = 1;
}

message ListPayoutsRequest {
  // The parent wallet name, for example, "users/user1/wallet"
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;

  optional google.protobuf.FieldMask fields = 99;
}

message ListPayoutsResponse {
  // There will be a maximum number of items returned based on the page_size field in the request.
  repeated Payout payouts = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}
