// @generated by protobuf-ts 2.2.1 with parameter server_grpc1,client_grpc1,generate_dependencies
// @generated from protobuf file "ride/wallet/v1/wallet_service.proto" (package "ride.wallet.v1", syntax proto3)
// tslint:disable
import { ListTransactionsByAccountIdResponse } from "./wallet_service";
import { ListTransactionsByAccountIdRequest } from "./wallet_service";
import { ListTransactionsByBatchIdResponse } from "./wallet_service";
import { ListTransactionsByBatchIdRequest } from "./wallet_service";
import { GetTransactionResponse } from "./wallet_service";
import { GetTransactionRequest } from "./wallet_service";
import { CreateTransactionsResponse } from "./wallet_service";
import { CreateTransactionsRequest } from "./wallet_service";
import { GetAccountByUidResponse } from "./wallet_service";
import { GetAccountByUidRequest } from "./wallet_service";
import { GetAccountResponse } from "./wallet_service";
import { GetAccountRequest } from "./wallet_service";
import { CreateAccountResponse } from "./wallet_service";
import { CreateAccountRequest } from "./wallet_service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service ride.wallet.v1.WalletService
 */
export interface IWalletService extends grpc.UntypedServiceImplementation {
    /**
     * Account related methods
     *
     * @generated from protobuf rpc: CreateAccount(ride.wallet.v1.CreateAccountRequest) returns (ride.wallet.v1.CreateAccountResponse);
     */
    createAccount: grpc.handleUnaryCall<CreateAccountRequest, CreateAccountResponse>;
    /**
     * @generated from protobuf rpc: GetAccount(ride.wallet.v1.GetAccountRequest) returns (ride.wallet.v1.GetAccountResponse);
     */
    getAccount: grpc.handleUnaryCall<GetAccountRequest, GetAccountResponse>;
    /**
     * @generated from protobuf rpc: GetAccountByUid(ride.wallet.v1.GetAccountByUidRequest) returns (ride.wallet.v1.GetAccountByUidResponse);
     */
    getAccountByUid: grpc.handleUnaryCall<GetAccountByUidRequest, GetAccountByUidResponse>;
    /**
     * Transaction related methods
     *
     * @generated from protobuf rpc: CreateTransactions(ride.wallet.v1.CreateTransactionsRequest) returns (ride.wallet.v1.CreateTransactionsResponse);
     */
    createTransactions: grpc.handleUnaryCall<CreateTransactionsRequest, CreateTransactionsResponse>;
    /**
     * @generated from protobuf rpc: GetTransaction(ride.wallet.v1.GetTransactionRequest) returns (ride.wallet.v1.GetTransactionResponse);
     */
    getTransaction: grpc.handleUnaryCall<GetTransactionRequest, GetTransactionResponse>;
    /**
     * @generated from protobuf rpc: ListTransactionsByBatchId(ride.wallet.v1.ListTransactionsByBatchIdRequest) returns (ride.wallet.v1.ListTransactionsByBatchIdResponse);
     */
    listTransactionsByBatchId: grpc.handleUnaryCall<ListTransactionsByBatchIdRequest, ListTransactionsByBatchIdResponse>;
    /**
     * @generated from protobuf rpc: ListTransactionsByAccountId(ride.wallet.v1.ListTransactionsByAccountIdRequest) returns (ride.wallet.v1.ListTransactionsByAccountIdResponse);
     */
    listTransactionsByAccountId: grpc.handleUnaryCall<ListTransactionsByAccountIdRequest, ListTransactionsByAccountIdResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service ride.wallet.v1.WalletService.
 *
 * Usage: Implement the interface IWalletService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IWalletService = ...
 * server.addService(walletServiceDefinition, service);
 * ```
 */
export const walletServiceDefinition: grpc.ServiceDefinition<IWalletService> = {
    createAccount: {
        path: "/ride.wallet.v1.WalletService/CreateAccount",
        originalName: "CreateAccount",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateAccountResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateAccountRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateAccountResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateAccountRequest.toBinary(value))
    },
    getAccount: {
        path: "/ride.wallet.v1.WalletService/GetAccount",
        originalName: "GetAccount",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAccountResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAccountRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAccountResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAccountRequest.toBinary(value))
    },
    getAccountByUid: {
        path: "/ride.wallet.v1.WalletService/GetAccountByUid",
        originalName: "GetAccountByUid",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAccountByUidResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAccountByUidRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAccountByUidResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAccountByUidRequest.toBinary(value))
    },
    createTransactions: {
        path: "/ride.wallet.v1.WalletService/CreateTransactions",
        originalName: "CreateTransactions",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateTransactionsResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateTransactionsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateTransactionsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateTransactionsRequest.toBinary(value))
    },
    getTransaction: {
        path: "/ride.wallet.v1.WalletService/GetTransaction",
        originalName: "GetTransaction",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetTransactionResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetTransactionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetTransactionResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetTransactionRequest.toBinary(value))
    },
    listTransactionsByBatchId: {
        path: "/ride.wallet.v1.WalletService/ListTransactionsByBatchId",
        originalName: "ListTransactionsByBatchId",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListTransactionsByBatchIdResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListTransactionsByBatchIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListTransactionsByBatchIdResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListTransactionsByBatchIdRequest.toBinary(value))
    },
    listTransactionsByAccountId: {
        path: "/ride.wallet.v1.WalletService/ListTransactionsByAccountId",
        originalName: "ListTransactionsByAccountId",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListTransactionsByAccountIdResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListTransactionsByAccountIdRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListTransactionsByAccountIdResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListTransactionsByAccountIdRequest.toBinary(value))
    }
};
