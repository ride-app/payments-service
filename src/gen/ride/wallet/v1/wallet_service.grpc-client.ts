// @generated by protobuf-ts 2.2.1 with parameter server_grpc1,client_grpc1,generate_dependencies
// @generated from protobuf file "ride/wallet/v1/wallet_service.proto" (package "ride.wallet.v1", syntax proto3)
// tslint:disable
import { WalletService } from "./wallet_service";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { ListTransactionsByAccountIdResponse } from "./wallet_service";
import type { ListTransactionsByAccountIdRequest } from "./wallet_service";
import type { ListTransactionsByBatchIdResponse } from "./wallet_service";
import type { ListTransactionsByBatchIdRequest } from "./wallet_service";
import type { GetTransactionResponse } from "./wallet_service";
import type { GetTransactionRequest } from "./wallet_service";
import type { CreateTransactionsResponse } from "./wallet_service";
import type { CreateTransactionsRequest } from "./wallet_service";
import type { GetAccountByUidResponse } from "./wallet_service";
import type { GetAccountByUidRequest } from "./wallet_service";
import type { GetAccountResponse } from "./wallet_service";
import type { GetAccountRequest } from "./wallet_service";
import type { CreateAccountResponse } from "./wallet_service";
import type { CreateAccountRequest } from "./wallet_service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service ride.wallet.v1.WalletService
 */
export interface IWalletServiceClient {
    /**
     * Account related methods
     *
     * @generated from protobuf rpc: CreateAccount(ride.wallet.v1.CreateAccountRequest) returns (ride.wallet.v1.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateAccountResponse) => void): grpc.ClientUnaryCall;
    createAccount(input: CreateAccountRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: CreateAccountResponse) => void): grpc.ClientUnaryCall;
    createAccount(input: CreateAccountRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateAccountResponse) => void): grpc.ClientUnaryCall;
    createAccount(input: CreateAccountRequest, callback: (err: grpc.ServiceError | null, value?: CreateAccountResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetAccount(ride.wallet.v1.GetAccountRequest) returns (ride.wallet.v1.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAccountResponse) => void): grpc.ClientUnaryCall;
    getAccount(input: GetAccountRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetAccountResponse) => void): grpc.ClientUnaryCall;
    getAccount(input: GetAccountRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAccountResponse) => void): grpc.ClientUnaryCall;
    getAccount(input: GetAccountRequest, callback: (err: grpc.ServiceError | null, value?: GetAccountResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetAccountByUid(ride.wallet.v1.GetAccountByUidRequest) returns (ride.wallet.v1.GetAccountByUidResponse);
     */
    getAccountByUid(input: GetAccountByUidRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void): grpc.ClientUnaryCall;
    getAccountByUid(input: GetAccountByUidRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void): grpc.ClientUnaryCall;
    getAccountByUid(input: GetAccountByUidRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void): grpc.ClientUnaryCall;
    getAccountByUid(input: GetAccountByUidRequest, callback: (err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void): grpc.ClientUnaryCall;
    /**
     * Transaction related methods
     *
     * @generated from protobuf rpc: CreateTransactions(ride.wallet.v1.CreateTransactionsRequest) returns (ride.wallet.v1.CreateTransactionsResponse);
     */
    createTransactions(input: CreateTransactionsRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void): grpc.ClientUnaryCall;
    createTransactions(input: CreateTransactionsRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void): grpc.ClientUnaryCall;
    createTransactions(input: CreateTransactionsRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void): grpc.ClientUnaryCall;
    createTransactions(input: CreateTransactionsRequest, callback: (err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetTransaction(ride.wallet.v1.GetTransactionRequest) returns (ride.wallet.v1.GetTransactionResponse);
     */
    getTransaction(input: GetTransactionRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetTransactionResponse) => void): grpc.ClientUnaryCall;
    getTransaction(input: GetTransactionRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetTransactionResponse) => void): grpc.ClientUnaryCall;
    getTransaction(input: GetTransactionRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetTransactionResponse) => void): grpc.ClientUnaryCall;
    getTransaction(input: GetTransactionRequest, callback: (err: grpc.ServiceError | null, value?: GetTransactionResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ListTransactionsByBatchId(ride.wallet.v1.ListTransactionsByBatchIdRequest) returns (ride.wallet.v1.ListTransactionsByBatchIdResponse);
     */
    listTransactionsByBatchId(input: ListTransactionsByBatchIdRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByBatchId(input: ListTransactionsByBatchIdRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByBatchId(input: ListTransactionsByBatchIdRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByBatchId(input: ListTransactionsByBatchIdRequest, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ListTransactionsByAccountId(ride.wallet.v1.ListTransactionsByAccountIdRequest) returns (ride.wallet.v1.ListTransactionsByAccountIdResponse);
     */
    listTransactionsByAccountId(input: ListTransactionsByAccountIdRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByAccountId(input: ListTransactionsByAccountIdRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByAccountId(input: ListTransactionsByAccountIdRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void): grpc.ClientUnaryCall;
    listTransactionsByAccountId(input: ListTransactionsByAccountIdRequest, callback: (err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service ride.wallet.v1.WalletService
 */
export class WalletServiceClient extends grpc.Client implements IWalletServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Account related methods
     *
     * @generated from protobuf rpc: CreateAccount(ride.wallet.v1.CreateAccountRequest) returns (ride.wallet.v1.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateAccountResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateAccountResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: CreateAccountResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[0];
        return this.makeUnaryRequest<CreateAccountRequest, CreateAccountResponse>(`/${WalletService.typeName}/${method.name}`, (value: CreateAccountRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): CreateAccountResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetAccount(ride.wallet.v1.GetAccountRequest) returns (ride.wallet.v1.GetAccountResponse);
     */
    getAccount(input: GetAccountRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAccountResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAccountResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetAccountResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[1];
        return this.makeUnaryRequest<GetAccountRequest, GetAccountResponse>(`/${WalletService.typeName}/${method.name}`, (value: GetAccountRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetAccountResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetAccountByUid(ride.wallet.v1.GetAccountByUidRequest) returns (ride.wallet.v1.GetAccountByUidResponse);
     */
    getAccountByUid(input: GetAccountByUidRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetAccountByUidResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[2];
        return this.makeUnaryRequest<GetAccountByUidRequest, GetAccountByUidResponse>(`/${WalletService.typeName}/${method.name}`, (value: GetAccountByUidRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetAccountByUidResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Transaction related methods
     *
     * @generated from protobuf rpc: CreateTransactions(ride.wallet.v1.CreateTransactionsRequest) returns (ride.wallet.v1.CreateTransactionsResponse);
     */
    createTransactions(input: CreateTransactionsRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: CreateTransactionsResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[3];
        return this.makeUnaryRequest<CreateTransactionsRequest, CreateTransactionsResponse>(`/${WalletService.typeName}/${method.name}`, (value: CreateTransactionsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): CreateTransactionsResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetTransaction(ride.wallet.v1.GetTransactionRequest) returns (ride.wallet.v1.GetTransactionResponse);
     */
    getTransaction(input: GetTransactionRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetTransactionResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetTransactionResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetTransactionResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[4];
        return this.makeUnaryRequest<GetTransactionRequest, GetTransactionResponse>(`/${WalletService.typeName}/${method.name}`, (value: GetTransactionRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetTransactionResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ListTransactionsByBatchId(ride.wallet.v1.ListTransactionsByBatchIdRequest) returns (ride.wallet.v1.ListTransactionsByBatchIdResponse);
     */
    listTransactionsByBatchId(input: ListTransactionsByBatchIdRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ListTransactionsByBatchIdResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[5];
        return this.makeUnaryRequest<ListTransactionsByBatchIdRequest, ListTransactionsByBatchIdResponse>(`/${WalletService.typeName}/${method.name}`, (value: ListTransactionsByBatchIdRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ListTransactionsByBatchIdResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ListTransactionsByAccountId(ride.wallet.v1.ListTransactionsByAccountIdRequest) returns (ride.wallet.v1.ListTransactionsByAccountIdResponse);
     */
    listTransactionsByAccountId(input: ListTransactionsByAccountIdRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ListTransactionsByAccountIdResponse) => void)): grpc.ClientUnaryCall {
        const method = WalletService.methods[6];
        return this.makeUnaryRequest<ListTransactionsByAccountIdRequest, ListTransactionsByAccountIdResponse>(`/${WalletService.typeName}/${method.name}`, (value: ListTransactionsByAccountIdRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ListTransactionsByAccountIdResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
