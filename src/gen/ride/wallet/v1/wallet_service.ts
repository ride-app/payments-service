// @generated by protobuf-ts 2.2.1 with parameter server_grpc1,client_grpc1,generate_dependencies
// @generated from protobuf file "ride/wallet/v1/wallet_service.proto" (package "ride.wallet.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { FieldMask } from "../../../google/protobuf/field_mask";
/**
 * @generated from protobuf message ride.wallet.v1.CreateAccountRequest
 */
export interface CreateAccountRequest {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
}
/**
 * @generated from protobuf message ride.wallet.v1.CreateAccountResponse
 */
export interface CreateAccountResponse {
    /**
     * @generated from protobuf field: ride.wallet.v1.Account account = 1;
     */
    account?: Account;
}
/**
 * @generated from protobuf message ride.wallet.v1.GetAccountRequest
 */
export interface GetAccountRequest {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldMask field_mask = 99;
     */
    fieldMask?: FieldMask;
}
/**
 * @generated from protobuf message ride.wallet.v1.GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     * @generated from protobuf field: ride.wallet.v1.Account account = 1;
     */
    account?: Account;
}
/**
 * @generated from protobuf message ride.wallet.v1.GetAccountByUidRequest
 */
export interface GetAccountByUidRequest {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldMask field_mask = 99;
     */
    fieldMask?: FieldMask;
}
/**
 * @generated from protobuf message ride.wallet.v1.GetAccountByUidResponse
 */
export interface GetAccountByUidResponse {
    /**
     * @generated from protobuf field: ride.wallet.v1.Account account = 1;
     */
    account?: Account;
}
/**
 * @generated from protobuf message ride.wallet.v1.Account
 */
export interface Account {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: string uid = 2;
     */
    uid: string;
    /**
     * @generated from protobuf field: int32 balance = 3;
     */
    balance: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp create_time = 7;
     */
    createTime?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp update_time = 8;
     */
    updateTime?: Timestamp;
}
/**
 * @generated from protobuf message ride.wallet.v1.CreateTransactionsRequest
 */
export interface CreateTransactionsRequest {
    /**
     * @generated from protobuf field: repeated ride.wallet.v1.CreateTransactionsRequest.Entry transactions = 2;
     */
    transactions: CreateTransactionsRequest_Entry[];
}
/**
 * @generated from protobuf message ride.wallet.v1.CreateTransactionsRequest.Entry
 */
export interface CreateTransactionsRequest_Entry {
    /**
     * @generated from protobuf field: string account_id = 2;
     */
    accountId: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: ride.wallet.v1.TransactionType type = 4;
     */
    type: TransactionType;
}
/**
 * @generated from protobuf message ride.wallet.v1.CreateTransactionsResponse
 */
export interface CreateTransactionsResponse {
    /**
     * @generated from protobuf field: string batch_id = 1;
     */
    batchId: string;
    /**
     * @generated from protobuf field: repeated string transaction_ids = 2;
     */
    transactionIds: string[];
}
/**
 * @generated from protobuf message ride.wallet.v1.GetTransactionRequest
 */
export interface GetTransactionRequest {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldMask field_mask = 99;
     */
    fieldMask?: FieldMask;
}
/**
 * @generated from protobuf message ride.wallet.v1.GetTransactionResponse
 */
export interface GetTransactionResponse {
    /**
     * @generated from protobuf field: ride.wallet.v1.Transaction transaction = 1;
     */
    transaction?: Transaction;
}
/**
 * @generated from protobuf message ride.wallet.v1.ListTransactionsByBatchIdRequest
 */
export interface ListTransactionsByBatchIdRequest {
    /**
     * @generated from protobuf field: string batch_id = 1;
     */
    batchId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldMask field_mask = 99;
     */
    fieldMask?: FieldMask;
}
/**
 * @generated from protobuf message ride.wallet.v1.ListTransactionsByBatchIdResponse
 */
export interface ListTransactionsByBatchIdResponse {
    /**
     * @generated from protobuf field: repeated ride.wallet.v1.Transaction transactions = 1;
     */
    transactions: Transaction[];
}
/**
 * @generated from protobuf message ride.wallet.v1.ListTransactionsByAccountIdRequest
 */
export interface ListTransactionsByAccountIdRequest {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldMask field_mask = 99;
     */
    fieldMask?: FieldMask;
}
/**
 * @generated from protobuf message ride.wallet.v1.ListTransactionsByAccountIdResponse
 */
export interface ListTransactionsByAccountIdResponse {
    /**
     * @generated from protobuf field: repeated ride.wallet.v1.Transaction transactions = 1;
     */
    transactions: Transaction[];
}
/**
 * @generated from protobuf message ride.wallet.v1.Transaction
 */
export interface Transaction {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string account_id = 2;
     */
    accountId: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: ride.wallet.v1.TransactionType type = 4;
     */
    type: TransactionType;
    /**
     * @generated from protobuf field: string batch_id = 5;
     */
    batchId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp create_time = 6;
     */
    createTime?: Timestamp;
}
/**
 * @generated from protobuf enum ride.wallet.v1.TransactionType
 */
export enum TransactionType {
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_DEBIT = 1;
     */
    DEBIT = 1,
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_CREDIT = 2;
     */
    CREDIT = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountRequest$Type extends MessageType<CreateAccountRequest> {
    constructor() {
        super("ride.wallet.v1.CreateAccountRequest", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAccountRequest>): CreateAccountRequest {
        const message = { uid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountRequest): CreateAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.CreateAccountRequest
 */
export const CreateAccountRequest = new CreateAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountResponse$Type extends MessageType<CreateAccountResponse> {
    constructor() {
        super("ride.wallet.v1.CreateAccountResponse", [
            { no: 1, name: "account", kind: "message", T: () => Account }
        ]);
    }
    create(value?: PartialMessage<CreateAccountResponse>): CreateAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountResponse): CreateAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ride.wallet.v1.Account account */ 1:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ride.wallet.v1.Account account = 1; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.CreateAccountResponse
 */
export const CreateAccountResponse = new CreateAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountRequest$Type extends MessageType<GetAccountRequest> {
    constructor() {
        super("ride.wallet.v1.GetAccountRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "field_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<GetAccountRequest>): GetAccountRequest {
        const message = { accountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountRequest): GetAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* optional google.protobuf.FieldMask field_mask */ 99:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* optional google.protobuf.FieldMask field_mask = 99; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(99, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetAccountRequest
 */
export const GetAccountRequest = new GetAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountResponse$Type extends MessageType<GetAccountResponse> {
    constructor() {
        super("ride.wallet.v1.GetAccountResponse", [
            { no: 1, name: "account", kind: "message", T: () => Account }
        ]);
    }
    create(value?: PartialMessage<GetAccountResponse>): GetAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountResponse): GetAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ride.wallet.v1.Account account */ 1:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ride.wallet.v1.Account account = 1; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetAccountResponse
 */
export const GetAccountResponse = new GetAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountByUidRequest$Type extends MessageType<GetAccountByUidRequest> {
    constructor() {
        super("ride.wallet.v1.GetAccountByUidRequest", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "field_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<GetAccountByUidRequest>): GetAccountByUidRequest {
        const message = { uid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountByUidRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountByUidRequest): GetAccountByUidRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* optional google.protobuf.FieldMask field_mask */ 99:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountByUidRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* optional google.protobuf.FieldMask field_mask = 99; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(99, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetAccountByUidRequest
 */
export const GetAccountByUidRequest = new GetAccountByUidRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountByUidResponse$Type extends MessageType<GetAccountByUidResponse> {
    constructor() {
        super("ride.wallet.v1.GetAccountByUidResponse", [
            { no: 1, name: "account", kind: "message", T: () => Account }
        ]);
    }
    create(value?: PartialMessage<GetAccountByUidResponse>): GetAccountByUidResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountByUidResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountByUidResponse): GetAccountByUidResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ride.wallet.v1.Account account */ 1:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountByUidResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ride.wallet.v1.Account account = 1; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetAccountByUidResponse
 */
export const GetAccountByUidResponse = new GetAccountByUidResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Account$Type extends MessageType<Account> {
    constructor() {
        super("ride.wallet.v1.Account", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "balance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "create_time", kind: "message", T: () => Timestamp },
            { no: 8, name: "update_time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Account>): Account {
        const message = { accountId: "", uid: "", balance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Account): Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* string uid */ 2:
                    message.uid = reader.string();
                    break;
                case /* int32 balance */ 3:
                    message.balance = reader.int32();
                    break;
                case /* google.protobuf.Timestamp create_time */ 7:
                    message.createTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createTime);
                    break;
                case /* google.protobuf.Timestamp update_time */ 8:
                    message.updateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updateTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* string uid = 2; */
        if (message.uid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uid);
        /* int32 balance = 3; */
        if (message.balance !== 0)
            writer.tag(3, WireType.Varint).int32(message.balance);
        /* google.protobuf.Timestamp create_time = 7; */
        if (message.createTime)
            Timestamp.internalBinaryWrite(message.createTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp update_time = 8; */
        if (message.updateTime)
            Timestamp.internalBinaryWrite(message.updateTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.Account
 */
export const Account = new Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionsRequest$Type extends MessageType<CreateTransactionsRequest> {
    constructor() {
        super("ride.wallet.v1.CreateTransactionsRequest", [
            { no: 2, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateTransactionsRequest_Entry }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionsRequest>): CreateTransactionsRequest {
        const message = { transactions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionsRequest): CreateTransactionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ride.wallet.v1.CreateTransactionsRequest.Entry transactions */ 2:
                    message.transactions.push(CreateTransactionsRequest_Entry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ride.wallet.v1.CreateTransactionsRequest.Entry transactions = 2; */
        for (let i = 0; i < message.transactions.length; i++)
            CreateTransactionsRequest_Entry.internalBinaryWrite(message.transactions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.CreateTransactionsRequest
 */
export const CreateTransactionsRequest = new CreateTransactionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionsRequest_Entry$Type extends MessageType<CreateTransactionsRequest_Entry> {
    constructor() {
        super("ride.wallet.v1.CreateTransactionsRequest.Entry", [
            { no: 2, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["ride.wallet.v1.TransactionType", TransactionType, "TRANSACTION_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionsRequest_Entry>): CreateTransactionsRequest_Entry {
        const message = { accountId: "", amount: 0, type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionsRequest_Entry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionsRequest_Entry): CreateTransactionsRequest_Entry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 2:
                    message.accountId = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* ride.wallet.v1.TransactionType type */ 4:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionsRequest_Entry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 2; */
        if (message.accountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountId);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* ride.wallet.v1.TransactionType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.CreateTransactionsRequest.Entry
 */
export const CreateTransactionsRequest_Entry = new CreateTransactionsRequest_Entry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionsResponse$Type extends MessageType<CreateTransactionsResponse> {
    constructor() {
        super("ride.wallet.v1.CreateTransactionsResponse", [
            { no: 1, name: "batch_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "transaction_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionsResponse>): CreateTransactionsResponse {
        const message = { batchId: "", transactionIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionsResponse): CreateTransactionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string batch_id */ 1:
                    message.batchId = reader.string();
                    break;
                case /* repeated string transaction_ids */ 2:
                    message.transactionIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string batch_id = 1; */
        if (message.batchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.batchId);
        /* repeated string transaction_ids = 2; */
        for (let i = 0; i < message.transactionIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.transactionIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.CreateTransactionsResponse
 */
export const CreateTransactionsResponse = new CreateTransactionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTransactionRequest$Type extends MessageType<GetTransactionRequest> {
    constructor() {
        super("ride.wallet.v1.GetTransactionRequest", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "field_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<GetTransactionRequest>): GetTransactionRequest {
        const message = { transactionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTransactionRequest): GetTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* optional google.protobuf.FieldMask field_mask */ 99:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* optional google.protobuf.FieldMask field_mask = 99; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(99, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetTransactionRequest
 */
export const GetTransactionRequest = new GetTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTransactionResponse$Type extends MessageType<GetTransactionResponse> {
    constructor() {
        super("ride.wallet.v1.GetTransactionResponse", [
            { no: 1, name: "transaction", kind: "message", T: () => Transaction }
        ]);
    }
    create(value?: PartialMessage<GetTransactionResponse>): GetTransactionResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTransactionResponse): GetTransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ride.wallet.v1.Transaction transaction */ 1:
                    message.transaction = Transaction.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ride.wallet.v1.Transaction transaction = 1; */
        if (message.transaction)
            Transaction.internalBinaryWrite(message.transaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.GetTransactionResponse
 */
export const GetTransactionResponse = new GetTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTransactionsByBatchIdRequest$Type extends MessageType<ListTransactionsByBatchIdRequest> {
    constructor() {
        super("ride.wallet.v1.ListTransactionsByBatchIdRequest", [
            { no: 1, name: "batch_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "field_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<ListTransactionsByBatchIdRequest>): ListTransactionsByBatchIdRequest {
        const message = { batchId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListTransactionsByBatchIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTransactionsByBatchIdRequest): ListTransactionsByBatchIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string batch_id */ 1:
                    message.batchId = reader.string();
                    break;
                case /* optional google.protobuf.FieldMask field_mask */ 99:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTransactionsByBatchIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string batch_id = 1; */
        if (message.batchId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.batchId);
        /* optional google.protobuf.FieldMask field_mask = 99; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(99, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.ListTransactionsByBatchIdRequest
 */
export const ListTransactionsByBatchIdRequest = new ListTransactionsByBatchIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTransactionsByBatchIdResponse$Type extends MessageType<ListTransactionsByBatchIdResponse> {
    constructor() {
        super("ride.wallet.v1.ListTransactionsByBatchIdResponse", [
            { no: 1, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Transaction }
        ]);
    }
    create(value?: PartialMessage<ListTransactionsByBatchIdResponse>): ListTransactionsByBatchIdResponse {
        const message = { transactions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListTransactionsByBatchIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTransactionsByBatchIdResponse): ListTransactionsByBatchIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ride.wallet.v1.Transaction transactions */ 1:
                    message.transactions.push(Transaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTransactionsByBatchIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ride.wallet.v1.Transaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            Transaction.internalBinaryWrite(message.transactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.ListTransactionsByBatchIdResponse
 */
export const ListTransactionsByBatchIdResponse = new ListTransactionsByBatchIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTransactionsByAccountIdRequest$Type extends MessageType<ListTransactionsByAccountIdRequest> {
    constructor() {
        super("ride.wallet.v1.ListTransactionsByAccountIdRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 99, name: "field_mask", kind: "message", T: () => FieldMask }
        ]);
    }
    create(value?: PartialMessage<ListTransactionsByAccountIdRequest>): ListTransactionsByAccountIdRequest {
        const message = { accountId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListTransactionsByAccountIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTransactionsByAccountIdRequest): ListTransactionsByAccountIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* optional google.protobuf.FieldMask field_mask */ 99:
                    message.fieldMask = FieldMask.internalBinaryRead(reader, reader.uint32(), options, message.fieldMask);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTransactionsByAccountIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* optional google.protobuf.FieldMask field_mask = 99; */
        if (message.fieldMask)
            FieldMask.internalBinaryWrite(message.fieldMask, writer.tag(99, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.ListTransactionsByAccountIdRequest
 */
export const ListTransactionsByAccountIdRequest = new ListTransactionsByAccountIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTransactionsByAccountIdResponse$Type extends MessageType<ListTransactionsByAccountIdResponse> {
    constructor() {
        super("ride.wallet.v1.ListTransactionsByAccountIdResponse", [
            { no: 1, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Transaction }
        ]);
    }
    create(value?: PartialMessage<ListTransactionsByAccountIdResponse>): ListTransactionsByAccountIdResponse {
        const message = { transactions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListTransactionsByAccountIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTransactionsByAccountIdResponse): ListTransactionsByAccountIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ride.wallet.v1.Transaction transactions */ 1:
                    message.transactions.push(Transaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTransactionsByAccountIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ride.wallet.v1.Transaction transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            Transaction.internalBinaryWrite(message.transactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.ListTransactionsByAccountIdResponse
 */
export const ListTransactionsByAccountIdResponse = new ListTransactionsByAccountIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Transaction$Type extends MessageType<Transaction> {
    constructor() {
        super("ride.wallet.v1.Transaction", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["ride.wallet.v1.TransactionType", TransactionType, "TRANSACTION_TYPE_"] },
            { no: 5, name: "batch_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "create_time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Transaction>): Transaction {
        const message = { transactionId: "", accountId: "", amount: 0, type: 0, batchId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Transaction): Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string account_id */ 2:
                    message.accountId = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* ride.wallet.v1.TransactionType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* string batch_id */ 5:
                    message.batchId = reader.string();
                    break;
                case /* google.protobuf.Timestamp create_time */ 6:
                    message.createTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string account_id = 2; */
        if (message.accountId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accountId);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* ride.wallet.v1.TransactionType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* string batch_id = 5; */
        if (message.batchId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.batchId);
        /* google.protobuf.Timestamp create_time = 6; */
        if (message.createTime)
            Timestamp.internalBinaryWrite(message.createTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ride.wallet.v1.Transaction
 */
export const Transaction = new Transaction$Type();
/**
 * @generated ServiceType for protobuf service ride.wallet.v1.WalletService
 */
export const WalletService = new ServiceType("ride.wallet.v1.WalletService", [
    { name: "CreateAccount", options: {}, I: CreateAccountRequest, O: CreateAccountResponse },
    { name: "GetAccount", options: {}, I: GetAccountRequest, O: GetAccountResponse },
    { name: "GetAccountByUid", options: {}, I: GetAccountByUidRequest, O: GetAccountByUidResponse },
    { name: "CreateTransactions", options: {}, I: CreateTransactionsRequest, O: CreateTransactionsResponse },
    { name: "GetTransaction", options: {}, I: GetTransactionRequest, O: GetTransactionResponse },
    { name: "ListTransactionsByBatchId", options: {}, I: ListTransactionsByBatchIdRequest, O: ListTransactionsByBatchIdResponse },
    { name: "ListTransactionsByAccountId", options: {}, I: ListTransactionsByAccountIdRequest, O: ListTransactionsByAccountIdResponse }
]);
