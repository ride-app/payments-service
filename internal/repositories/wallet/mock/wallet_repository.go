// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/wallet-service/internal/repositories/wallet (interfaces: WalletRepository)

// Package mock_wallet is a generated GoMock package.
package mock_wallet

import (
	context "context"
	reflect "reflect"

	logger "github.com/deb-tech-n-sol/go/pkg/logger"
	gomock "github.com/golang/mock/gomock"
	walletv1alpha1 "github.com/ride-app/wallet-service/api/ride/wallet/v1alpha1"
	walletrepository "github.com/ride-app/wallet-service/internal/repositories/wallet"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// CreateTransactions mocks base method.
func (m *MockWalletRepository) CreateTransactions(arg0 context.Context, arg1 logger.Logger, arg2 *[]*walletrepository.Entry) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactions indicates an expected call of CreateTransactions.
func (mr *MockWalletRepositoryMockRecorder) CreateTransactions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactions", reflect.TypeOf((*MockWalletRepository)(nil).CreateTransactions), arg0, arg1, arg2)
}

// GetTransaction mocks base method.
func (m *MockWalletRepository) GetTransaction(arg0 context.Context, arg1 logger.Logger, arg2, arg3 string) (*walletv1alpha1.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*walletv1alpha1.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockWalletRepositoryMockRecorder) GetTransaction(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockWalletRepository)(nil).GetTransaction), arg0, arg1, arg2, arg3)
}

// GetTransactions mocks base method.
func (m *MockWalletRepository) GetTransactions(arg0 context.Context, arg1 logger.Logger, arg2 string, arg3 *string) ([]*walletv1alpha1.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*walletv1alpha1.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockWalletRepositoryMockRecorder) GetTransactions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockWalletRepository)(nil).GetTransactions), arg0, arg1, arg2, arg3)
}

// GetWallet mocks base method.
func (m *MockWalletRepository) GetWallet(arg0 context.Context, arg1 logger.Logger, arg2 string) (*walletv1alpha1.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(*walletv1alpha1.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepositoryMockRecorder) GetWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepository)(nil).GetWallet), arg0, arg1, arg2)
}
