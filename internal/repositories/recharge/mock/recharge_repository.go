// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/payments-service/internal/repositories/recharge (interfaces: RechargeRepository)

// Package mock_recharge is a generated GoMock package.
package mock_recharge

import (
	context "context"
	reflect "reflect"
	time "time"

	logger "github.com/dragonfish/go/pkg/logger"
	gomock "github.com/golang/mock/gomock"
	paymentsv1alpha1 "github.com/ride-app/payments-service/api/ride/payments/v1alpha1"
)

// MockRechargeRepository is a mock of RechargeRepository interface.
type MockRechargeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRechargeRepositoryMockRecorder
}

// MockRechargeRepositoryMockRecorder is the mock recorder for MockRechargeRepository.
type MockRechargeRepositoryMockRecorder struct {
	mock *MockRechargeRepository
}

// NewMockRechargeRepository creates a new mock instance.
func NewMockRechargeRepository(ctrl *gomock.Controller) *MockRechargeRepository {
	mock := &MockRechargeRepository{ctrl: ctrl}
	mock.recorder = &MockRechargeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRechargeRepository) EXPECT() *MockRechargeRepositoryMockRecorder {
	return m.recorder
}

// CreateRecharge mocks base method.
func (m *MockRechargeRepository) CreateRecharge(arg0 context.Context, arg1 logger.Logger, arg2 *paymentsv1alpha1.Recharge, arg3 *map[string]interface{}) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecharge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecharge indicates an expected call of CreateRecharge.
func (mr *MockRechargeRepositoryMockRecorder) CreateRecharge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecharge", reflect.TypeOf((*MockRechargeRepository)(nil).CreateRecharge), arg0, arg1, arg2, arg3)
}

// GetRecharge mocks base method.
func (m *MockRechargeRepository) GetRecharge(arg0 context.Context, arg1 logger.Logger, arg2, arg3 string) (*paymentsv1alpha1.Recharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecharge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*paymentsv1alpha1.Recharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecharge indicates an expected call of GetRecharge.
func (mr *MockRechargeRepositoryMockRecorder) GetRecharge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecharge", reflect.TypeOf((*MockRechargeRepository)(nil).GetRecharge), arg0, arg1, arg2, arg3)
}

// GetRecharges mocks base method.
func (m *MockRechargeRepository) GetRecharges(arg0 context.Context, arg1 logger.Logger, arg2 string) ([]*paymentsv1alpha1.Recharge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecharges", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*paymentsv1alpha1.Recharge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecharges indicates an expected call of GetRecharges.
func (mr *MockRechargeRepositoryMockRecorder) GetRecharges(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecharges", reflect.TypeOf((*MockRechargeRepository)(nil).GetRecharges), arg0, arg1, arg2)
}
