// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ride-app/wallet-service/repositories/transfer (interfaces: TransferRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../testing/mocks/transfer-repository.go -package mocks . TransferRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	logger "github.com/ride-app/go/pkg/logger"
	walletv1alpha1 "github.com/ride-app/wallet-service/api/gen/ride/wallet/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// CreateTransfers mocks base method.
func (m *MockTransferRepository) CreateTransfers(arg0 context.Context, arg1 logger.Logger, arg2 *[]*walletv1alpha1.Transfer) (*[]*walletv1alpha1.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfers", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]*walletv1alpha1.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfers indicates an expected call of CreateTransfers.
func (mr *MockTransferRepositoryMockRecorder) CreateTransfers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfers", reflect.TypeOf((*MockTransferRepository)(nil).CreateTransfers), arg0, arg1, arg2)
}

// GetTransfer mocks base method.
func (m *MockTransferRepository) GetTransfer(arg0 context.Context, arg1 logger.Logger, arg2, arg3 string) (*walletv1alpha1.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*walletv1alpha1.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockTransferRepositoryMockRecorder) GetTransfer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockTransferRepository)(nil).GetTransfer), arg0, arg1, arg2, arg3)
}

// GetTransfers mocks base method.
func (m *MockTransferRepository) GetTransfers(arg0 context.Context, arg1 logger.Logger, arg2 string) ([]*walletv1alpha1.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*walletv1alpha1.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockTransferRepositoryMockRecorder) GetTransfers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockTransferRepository)(nil).GetTransfers), arg0, arg1, arg2)
}
