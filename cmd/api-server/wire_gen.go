// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dragonfish/go/v2/pkg/logger"
	"github.com/ride-app/payments-service/config"
	"github.com/ride-app/payments-service/internal/api-handlers"
	"github.com/ride-app/payments-service/internal/repositories/auth"
	"github.com/ride-app/payments-service/internal/repositories/payout"
	"github.com/ride-app/payments-service/internal/repositories/recharge"
	"github.com/ride-app/payments-service/internal/repositories/transfer"
	"github.com/ride-app/payments-service/internal/repositories/wallet"
	"github.com/ride-app/payments-service/third-party"
)

// Injectors from wire.go:

func InitializeService(logger2 logger.Logger, config2 *config.Config) (*apihandlers.PaymentsServiceServer, error) {
	app, err := thirdparty.NewFirebaseApp(config2)
	if err != nil {
		return nil, err
	}
	firebaseImpl, err := authrepository.NewFirebaseAuthRepository(app)
	if err != nil {
		return nil, err
	}
	firestoreImpl, err := walletrepository.NewFirestoreWalletRepository(config2, app)
	if err != nil {
		return nil, err
	}
	transferrepositoryFirestoreImpl, err := transferrepository.NewFirestoreTransferRepository(config2, app)
	if err != nil {
		return nil, err
	}
	client, err := thirdparty.NewPubSubClient(config2)
	if err != nil {
		return nil, err
	}
	rechargerepositoryFirestoreImpl, err := rechargerepository.NewFirestoreRechargeRepository(config2, app, client)
	if err != nil {
		return nil, err
	}
	payoutrepositoryFirestoreImpl, err := payoutrepository.NewFirestorePayoutRepository(config2, app)
	if err != nil {
		return nil, err
	}
	razorpayClient := thirdparty.NewRazorpayClient(config2)
	paymentsServiceServer := apihandlers.New(logger2, config2, firebaseImpl, firestoreImpl, transferrepositoryFirestoreImpl, rechargerepositoryFirestoreImpl, payoutrepositoryFirestoreImpl, razorpayClient)
	return paymentsServiceServer, nil
}
